// ABSOLUTELY HUGE SHOUT OUT TO 'Portfolio Course' people which gave me a ton of help in this since i coundnt figure out how to exactly do this.
// I COULDNT SET ALL THINGS TOGETHER BUT THEIR VIDEO ON YOUTUBE BASICALLY GAVE ME THE ANSWER I WAS LOOKING FOR, BOTH VIDEO AND GITHUB LINKS CAN BE FOUND BELOW
// https://www.youtube.com/watch?v=LeWuki7AQLo
// https://github.com/portfoliocourses/c-example-code/blob/main/merge_sort.c

#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#define ArrSize 20000

void mergeSort(int a[], int length);
void mergeSortRecursion(int a[], int l, int r);
void mergeSortedArrays(int a[], int l, int m, int r);

// Array filler function
int arrayFill (int v[], int n, int max) {

	for (int i = 0; i < n; i++) {
		v[i] = (rand() % max) + 1;
	}
}

int main () {
	
	// Setting whats necessary to make an unique array everytime
	srand(time(NULL));

	// Defining the array attributes and filling it
	int v[ArrSize];
	arrayFill(v, ArrSize, 30000);

	// Setuping the clock which will tell the exact runtime
	double SpentTime = 0.0;
	clock_t t;	

	// Start of the Sorting part, time must start here.
	t = clock();

	mergeSort(v, ArrSize);

	t = clock() - t;

	for (int g = 0; g < ArrSize-1; g++){
		printf("%d\n", v[g]);
	}

	printf("Tempo de execucao: %lf", ((double)t)/((CLOCKS_PER_SEC/1000)));
}

void mergeSort(int a[], int length)
{

  mergeSortRecursion(a, 0, length - 1);
}

void mergeSortRecursion(int a[], int l, int r)
{
  if (l < r)
  {

    int m = l + (r - l) / 2;
  
    mergeSortRecursion(a, l, m);
    mergeSortRecursion(a, m + 1, r);
  
    mergeSortedArrays(a, l, m, r);
  }
}

void mergeSortedArrays(int a[], int l, int m, int r)
{

  int left_length = m - l + 1;
  int right_length = r - m;

  int temp_left[left_length];
  int temp_right[right_length];
  
  int i, j, k;

  for (int i = 0; i < left_length; i++)
    temp_left[i] = a[l + i];
  
  for (int i = 0; i < right_length; i++)
    temp_right[i] = a[m + 1 + i];
  
  for (i = 0, j = 0, k = l; k <= r; k++)
  {
   
    if ((i < left_length) &&
        (j >= right_length || temp_left[i] <= temp_right[j]))
    {
      a[k] = temp_left[i];
      i++;
    }
    else
    {
      a[k] = temp_right[j];
      j++;
    }
  }  
}
